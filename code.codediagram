{"id":-1,"name":"FROM_FILE","userId":-1,"createdAt":"","updatedAt":"","content":{"items":[{"uid":"XEFlXFZoxY","position":{"x":1590,"y":830},"sizes":{"width":650,"height":532.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Function for formatting and sending the email"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"def send_email(gpu):\n    subject = f\"New GPU Found: {gpu['name']}\"\n    body = f\"\"\"\n    <h2>New GPU Listing</h2>\n    <p><strong>Price:</strong> {gpu['price']} Ft</p>\n    <p><strong>Time:</strong> {gpu['time']}</p>\n    <p><a href=\"{gpu['link']}\">View Listing</a></p>\n    \"\"\"\n\n    email_data = {\n        \"sender\": {\"name\": \"GPU Alerts\", \"email\": \"leviiytpublick@gmail.com\"},\n        \"to\": [{\"email\": \"leviiytpublick@gmail.com\"}],\n        \"subject\": subject,\n        \"htmlContent\": body\n    }\n\n    try:\n        api_instance.send_transac_email(email_data)\n        print(f\"Email sent for GPU: {gpu['name']}\")\n    except ApiException as e:\n        print(f\"Error sending email: {e}\")"}]}]},"nodeType":"block"},{"uid":"tXwKQQ8Xy9","position":{"x":550,"y":-1220},"sizes":{"width":540,"height":287.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Function to load existing data from the csv file"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"def load_existing_data(csv_file):\n    try:\n        with open(csv_file, mode=\"r\", encoding=\"utf-8\") as file:\n            reader = csv.DictReader(file)\n            return {row[\"id\"]: row for row in reader}\n    except FileNotFoundError:\n        return {}"}]}]},"nodeType":"block"},{"uid":"hywlwFLMpy","position":{"x":-1670,"y":970},"sizes":{"width":600,"height":252.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Function to save/append newly scraped data to the csv"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"def save_to_csv(csv_file, data, fieldnames):\n    with open(csv_file, mode=\"w\", newline=\"\", encoding=\"utf-8\") as file:\n        writer = csv.DictWriter(file, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(data)"}]}]},"nodeType":"block"},{"uid":"z9NSonh3-m","position":{"x":-1020,"y":-60},"sizes":{"width":810,"height":410},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Function for date formatting"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"def parse_time(raw_time):\n    now = datetime.now()\n    if raw_time.startswith(\"ma\"):\n        time_part = raw_time.split(\" \")[1]\n        return datetime.strptime(f\"{now.strftime('%Y-%m-%d')} {time_part}\", \"%Y-%m-%d %H:%M\")\n    elif raw_time.startswith(\"tegnap\"):\n        time_part = raw_time.split(\" \")[1]\n        yesterday = now - timedelta(days=1)\n        return datetime.strptime(f\"{yesterday.strftime('%Y-%m-%d')} {time_part}\", \"%Y-%m-%d %H:%M\")\n    else:\n        try:\n            return datetime.strptime(raw_time, \"%Y-%m-%d %H:%M\")\n        except ValueError:\n            return datetime.strptime(raw_time, \"%Y-%m-%d\")"}]}]},"nodeType":"block"},{"uid":"4IssDK2BPK","position":{"x":2360,"y":860},"sizes":{"width":700,"height":480},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Setting up API for the email feature"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"# Load .env file if running locally\nif os.getenv(\"GITHUB_ACTIONS\") is None:\n    load_dotenv()\n\n# Get API key (either from environment or .env file)\nBREVO_API_KEY = os.getenv(\"BREVO_API_KEY\")\n\n# Ensure the API key is available\nif BREVO_API_KEY is None:\n    raise ValueError(\"BREVO_API_KEY is not set. Make sure to set it in the .env file or GitHub Secrets.\")\n\n# Configure API client\nconfiguration = sib_api_v3_sdk.Configuration()\nconfiguration.api_key[\"api-key\"] = BREVO_API_KEY\napi_instance = sib_api_v3_sdk.TransactionalEmailsApi(sib_api_v3_sdk.ApiClient(configuration))\n"}]}]},"nodeType":"block"},{"uid":"zhNMqQKBMJ","position":{"x":220,"y":-880},"sizes":{"width":370,"height":200},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Scrape the webpage"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"url = \"https://hardverapro.hu/...\"\npage = requests.get(url).text\ndoc = BeautifulSoup(page, \"html.parser\")"}]}]},"nodeType":"block"},{"uid":"OCZhQIWXos","position":{"x":-140,"y":-970},"sizes":{"width":310,"height":290},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Keeping track of different kind of listings in the current scrape instance"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"gpu_listings = []\n\niced_gpus_count = 0\niced_gpus = []\n\n# Track IDs from the new search\nnew_search_ids = set()"}]}]},"nodeType":"block"},{"uid":"H_hOoh7OgD","position":{"x":620,"y":-860},"sizes":{"width":400,"height":180},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Determain the existing database"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"csv_file = \"gpu_listings.csv\"\nexisting_data = load_existing_data(csv_file)"}]}]},"nodeType":"block"},{"uid":"_TQRvdSsTj","position":{"x":-70,"y":-410},"sizes":{"width":888.9375,"height":1102.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","text":"Main script"}]},{"type":"bulletList","content":[{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Scraping and formatting all the data. (name, price, time, iced status, id, ti)"}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Checking if the listing got iced or archived."}]}]},{"type":"listItem","content":[{"type":"paragraph","content":[{"type":"text","text":"Appending new listings if there were any."}]}]}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"search_result = doc.find_all(\"li\", class_=\"media\")\nfor result in search_result:\n    name = result.find(\"h1\").a.string\n    name_l = name.lower()\n\n    str_price = result.find(\"span\", class_=\"text-nowrap\").string\n\n    if str_price == \"Csere\" or \"3080\" not in name or \"3070\" in name or \"mobile\" in name_l or \"hibás\" in name_l:\n        continue\n\n    price = int(str_price.replace(\" \", \"\").replace(\"Ft\", \"\"))\n    raw_time = result.find(class_=\"uad-time\").time.string\n    try:\n        time = \"Előresorolva\" if raw_time is None else parse_time(raw_time)\n    except Exception as e:\n        print(f\"Error parsing time: {raw_time}, {e}\")\n        continue\n\n    iced = result.find(\"div\", class_=\"uad-price\").small\n    iced = False if iced is None else True\n\n    link = result.find(\"h1\").a[\"href\"]\n    id = result[\"data-uadid\"]\n    new_search_ids.add(id)\n\n    ti = False\n    if \" ti \" in name_l or \"3080ti\" in name_l or \"3080 ti\" in name_l:\n        ti = True\n\n    if id in existing_data:\n        if existing_data[id][\"iced\"] == \"False\" and iced:\n            existing_data[id][\"iced\"] = \"True\"\n            iced_gpus_count += 1\n            iced_gpus.append(f\"ID: {id}, Name: {existing_data[id]['name']}\")\n        existing_data[id][\"archived\"] = \"False\"  # Ensure existing listings are marked as not archived\n        continue\n\n    gpu_listings.append({\n        \"id\": id,\n        \"name\": name,\n        \"ti\": ti,\n        \"price\": price,\n        \"time\": time,\n        \"iced\": iced,\n        \"link\": link,\n        \"date_added\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n        \"archived\": \"False\"  # New listings are not archived\n    })\n"}]}]},"nodeType":"block"},{"uid":"yJn2J7dNLz","position":{"x":180,"y":920},"sizes":{"width":710,"height":427.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Keep track of archived listings"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"# Mark missing IDs as archived and print them\narchived_gpus = []\n\nfor old_id in existing_data:\n    if old_id not in new_search_ids and existing_data[old_id][\"archived\"] == \"False\":\n        existing_data[old_id][\"archived\"] = \"True\"\n        archived_gpus.append(f\"ID: {old_id}, Name: {existing_data[old_id]['name']}\")\n\n# Print GPUs that got archived in this run\nif archived_gpus:\n    print(\"\\nArchived GPUs:\")\n    for gpu in archived_gpus:\n        print(gpu)\nelse:\n    print(\"\\nNo GPUs were archived.\")"}]}]},"nodeType":"block"},{"uid":"P-12zyk2RL","position":{"x":-890,"y":870},"sizes":{"width":950,"height":532.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Compare the scraped data with the database and append it and output the result"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"# Combine existing data with new listings\nupdated_data = list(existing_data.values()) + gpu_listings\n\n# Save the updated CSV\nfieldnames = [\"id\", \"name\", \"ti\", \"price\", \"time\", \"iced\", \"link\", \"date_added\", \"archived\"]\nsave_to_csv(csv_file, updated_data, fieldnames)\n\n# Output results\nif gpu_listings:\n    print(f\"Added {len(gpu_listings)} new GPU listings to {csv_file}:\")\n    for idx, gpu in enumerate(gpu_listings, start=len(existing_data) + 1):\n        print(f\"ID: {gpu['id']}, Name: {gpu['name']}, Price: {gpu['price']}, Row: {idx+1}, Date Added: {gpu['time']}\")\nelse:\n    print(\"\\nNo new GPU listings found.\")\n\nif iced_gpus_count > 0:\n    print(f\"\\n{iced_gpus_count} GPU(s) got iced:\")\n    for gpu in iced_gpus:\n        print(gpu)\nelse:\n    print(\"\\nNo GPUs were iced.\")"}]}]},"nodeType":"block"},{"uid":"jkabfjhs5e","position":{"x":1060,"y":980},"sizes":{"width":400,"height":250},"autoheight":false,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"Webhook trigger for email function"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"# Send webhook for affordable GPUs\nif gpu_listings:\n    for gpu in gpu_listings:\n        if gpu[\"price\"] < 160000:\n            send_email(gpu)"}]}]},"nodeType":"block"},{"uid":"YRoSslJBvi","position":{"x":-610,"y":1490},"sizes":{"width":400,"height":144},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"gpu_listings.csv"}]},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","text":"The database for storing all scraped information about the listings"}]}]},"nodeType":"block"},{"uid":"tGVk7XiHH-","position":{"x":-650,"y":1740},"sizes":{"width":510,"height":382},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"sql_data_migration.py"}]},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","text":"Read the CSV to Panda"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"# File paths\ncsv_file = \"gpu_listings.csv\"  # Your current CSV file\ndatabase_file = \"gpu_listings.db\"  # SQLite database file\n\n# Read the CSV file into a Pandas DataFrame\ntry:\n    df = pd.read_csv(csv_file)\n    print(f\"Loaded {len(df)} rows from '{csv_file}'.\")\nexcept FileNotFoundError:\n    print(f\"Error: File '{csv_file}' not found.\")\n    exit()\n"}]}]},"nodeType":"block"},{"uid":"_kWmlsxdG-","position":{"x":50,"y":1780},"sizes":{"width":850,"height":294.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"sql_data_migration.py"}]},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","text":"Convert time and date columns to proper datetime format"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"try:\n    df['time'] = pd.to_datetime(df['time'], errors='coerce')  # Handle invalid dates with NaT\n    df['date_added'] = pd.to_datetime(df['date_added'], errors='coerce')  # Handle invalid dates with NaT\n    print(\"Converted 'time' and 'date_added' columns to datetime format.\")\nexcept KeyError as e:\n    print(f\"Error: Missing column in CSV: {e}\")\n    exit()"}]}]},"nodeType":"block"},{"uid":"mXVo4bxsBM","position":{"x":-800,"y":2200},"sizes":{"width":870,"height":1082},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"sql_data_migration.py"}]},{"type":"heading","attrs":{"level":2},"content":[{"type":"text","text":"Connect to SQLite database, create a table, insert and commit data, output result"}]},{"type":"codeBlock","attrs":{"language":"python","wrapCode":true},"content":[{"type":"text","text":"conn = sqlite3.connect(database_file)\ncursor = conn.cursor()\n\n# Create the table if it doesn't exist\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS gpu_listings (\n    id INTEGER PRIMARY KEY,\n    name TEXT,\n    ti BOOLEAN,\n    price REAL,\n    time DATETIME,\n    iced BOOLEAN,\n    link TEXT,\n    date_added DATETIME,\n    archived BOOLEAN\n)\n''')\nprint(\"Database table 'gpu_listings' ensured.\")\n\n# Insert data into the database only if it doesn't already exist\nnew_rows_count = 0\n\nfor _, row in df.iterrows():\n    try:\n        # Check if the row already exists in the database by ID\n        cursor.execute(\"SELECT COUNT(*) FROM gpu_listings WHERE id = ?\", (row['id'],))\n        exists = cursor.fetchone()[0]\n\n        if not exists:  # If the row does not exist, insert it\n            cursor.execute('''\n            INSERT INTO gpu_listings (id, name, ti, price, time, iced, link, date_added, archived)\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n            ''', (\n                row['id'],\n                row['name'],\n                row['ti'],\n                row['price'],\n                row['time'].strftime('%Y-%m-%d %H:%M:%S') if not pd.isna(row['time']) else None,\n                row['iced'],\n                row['link'],\n                row['date_added'].strftime('%Y-%m-%d %H:%M:%S') if not pd.isna(row['date_added']) else None,\n                row['archived']\n            ))\n            new_rows_count += 1\n    except sqlite3.Error as e:\n        print(f\"Error inserting row with ID {row['id']}: {e}\")\n\n# Commit changes and close the connection\nconn.commit()\nconn.close()\n\nprint(f\"{new_rows_count} new rows were inserted into the database.\")"}]}]},"nodeType":"block"},{"uid":"rfmIhAcg2k","position":{"x":-570,"y":3350},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"gpu_listings.db"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"ZWNbRJCMI7","position":{"x":-920,"y":-2500},"sizes":{"width":710,"height":1222},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":".github/workflows/","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"run_script.yml"}]},{"type":"codeBlock","attrs":{"language":"yaml","wrapCode":true},"content":[{"type":"text","text":"name: Run Scraping Script and Migrate Data\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '00 6 * * *'\n    - cron: '00 7 * * *'\n    - cron: '00 8 * * *'\n    - cron: '00 10 * * *'\n    - cron: '00 11 * * *'\n    - cron: '00 13 * * *'\n    - cron: '00 14 * * *'\n    - cron: '00 16 * * *'\n    - cron: '0 18 * * *'\n    - cron: '0 20 * * *'\n    - cron: '0 22 * * *'\n\njobs:\n  run-scripts:\n    runs-on: ubuntu-latest\n    steps:\n      # Step 1: Checkout repository\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Step 2: Set up Python environment\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n\n      # Step 3: Install dependencies\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      # Step 4: Run the main scraping script\n      - name: Run Scraping Script\n        run: python script.py\n        env:\n          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}\n\n      # Step 5: Run the SQL migration script\n      - name: Migrate Data to SQLite\n        run: python sql_data_migration.py\n\n      # Step 6: Commit and push changes (CSV and SQLite database)\n      - name: Commit and Push Changes\n        run: |\n          git config --global user.name 'github-actions[bot]'\n          git config --global user.email 'github-actions[bot]@users.noreply.github.com'\n          git add gpu_listings.csv gpu_listings.db\n          if git diff --cached --quiet; then\n            echo \"No changes to commit\"\n          else\n            git commit -m 'Update gpu_listings.csv and gpu_listings.db'\n            git push\n          fi\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n"}]}]},"nodeType":"block"},{"uid":"vD3Irhm7HZ","position":{"x":-130,"y":-1860},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"script.py"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"PKtOB6P7uG","position":{"x":-130,"y":-1660},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"sql_data_migration.py"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"e2B2PJell9","position":{"x":320,"y":-1860},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"gpu_listings.csv"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"},{"uid":"_nQADnroEo","position":{"x":340,"y":-1680},"sizes":{"width":400,"height":112.5},"autoheight":true,"blockContent":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","marks":[{"type":"bold"}],"text":"gpu_listings.db"}]},{"type":"paragraph"}]},"nodeType":"block"},{"uid":"FGDVapKhaf","position":{"x":-1450,"y":-1940},"sizes":{"width":400,"height":109},"autoheight":true,"blockContent":{"content":[{"type":"filePathNode","attrs":{"pathToFile":"","version":1},"content":[{"type":"text","marks":[{"type":"bold"}],"text":"requirements.txt"}]},{"type":"paragraph","content":[{"type":"text","text":" "}]}]},"nodeType":"block"}],"configs":{"centerX":527.9370664604821,"centerY":94.88246005562223,"zoomLevel":0.58},"arrowData":{"arrowsMap":{},"pointsMap":{},"edgesMap":{"edge-zhNMqQKBMJ-zhNMqQKBMJ-bottom-_TQRvdSsTj-_TQRvdSsTj-top":{"uid":"edge-zhNMqQKBMJ-zhNMqQKBMJ-bottom-_TQRvdSsTj-_TQRvdSsTj-top","fromNodeId":"zhNMqQKBMJ","fromHandleId":"zhNMqQKBMJ-bottom","toNodeId":"_TQRvdSsTj","toHandleId":"_TQRvdSsTj-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-OCZhQIWXos-OCZhQIWXos-bottom-_TQRvdSsTj-_TQRvdSsTj-top":{"uid":"edge-OCZhQIWXos-OCZhQIWXos-bottom-_TQRvdSsTj-_TQRvdSsTj-top","fromNodeId":"OCZhQIWXos","fromHandleId":"OCZhQIWXos-bottom","toNodeId":"_TQRvdSsTj","toHandleId":"_TQRvdSsTj-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-H_hOoh7OgD-H_hOoh7OgD-bottom-_TQRvdSsTj-_TQRvdSsTj-top":{"uid":"edge-H_hOoh7OgD-H_hOoh7OgD-bottom-_TQRvdSsTj-_TQRvdSsTj-top","fromNodeId":"H_hOoh7OgD","fromHandleId":"H_hOoh7OgD-bottom","toNodeId":"_TQRvdSsTj","toHandleId":"_TQRvdSsTj-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-_TQRvdSsTj-_TQRvdSsTj-bottom-jkabfjhs5e-jkabfjhs5e-top":{"uid":"edge-_TQRvdSsTj-_TQRvdSsTj-bottom-jkabfjhs5e-jkabfjhs5e-top","fromNodeId":"_TQRvdSsTj","fromHandleId":"_TQRvdSsTj-bottom","toNodeId":"jkabfjhs5e","toHandleId":"jkabfjhs5e-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-_TQRvdSsTj-_TQRvdSsTj-bottom-yJn2J7dNLz-yJn2J7dNLz-top":{"uid":"edge-_TQRvdSsTj-_TQRvdSsTj-bottom-yJn2J7dNLz-yJn2J7dNLz-top","fromNodeId":"_TQRvdSsTj","fromHandleId":"_TQRvdSsTj-bottom","toNodeId":"yJn2J7dNLz","toHandleId":"yJn2J7dNLz-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-z9NSonh3-m-z9NSonh3-m-right-_TQRvdSsTj-_TQRvdSsTj-left":{"uid":"edge-z9NSonh3-m-z9NSonh3-m-right-_TQRvdSsTj-_TQRvdSsTj-left","fromNodeId":"z9NSonh3-m","fromHandleId":"z9NSonh3-m-right","toNodeId":"_TQRvdSsTj","toHandleId":"_TQRvdSsTj-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-_TQRvdSsTj-_TQRvdSsTj-bottom-P-12zyk2RL-P-12zyk2RL-top":{"uid":"edge-_TQRvdSsTj-_TQRvdSsTj-bottom-P-12zyk2RL-P-12zyk2RL-top","fromNodeId":"_TQRvdSsTj","fromHandleId":"_TQRvdSsTj-bottom","toNodeId":"P-12zyk2RL","toHandleId":"P-12zyk2RL-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-hywlwFLMpy-hywlwFLMpy-right-P-12zyk2RL-P-12zyk2RL-left":{"uid":"edge-hywlwFLMpy-hywlwFLMpy-right-P-12zyk2RL-P-12zyk2RL-left","fromNodeId":"hywlwFLMpy","fromHandleId":"hywlwFLMpy-right","toNodeId":"P-12zyk2RL","toHandleId":"P-12zyk2RL-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-tXwKQQ8Xy9-tXwKQQ8Xy9-bottom-H_hOoh7OgD-H_hOoh7OgD-top":{"uid":"edge-tXwKQQ8Xy9-tXwKQQ8Xy9-bottom-H_hOoh7OgD-H_hOoh7OgD-top","fromNodeId":"tXwKQQ8Xy9","fromHandleId":"tXwKQQ8Xy9-bottom","toNodeId":"H_hOoh7OgD","toHandleId":"H_hOoh7OgD-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-XEFlXFZoxY-XEFlXFZoxY-left-jkabfjhs5e-jkabfjhs5e-right":{"uid":"edge-XEFlXFZoxY-XEFlXFZoxY-left-jkabfjhs5e-jkabfjhs5e-right","fromNodeId":"XEFlXFZoxY","fromHandleId":"XEFlXFZoxY-left","toNodeId":"jkabfjhs5e","toHandleId":"jkabfjhs5e-right","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-4IssDK2BPK-4IssDK2BPK-left-XEFlXFZoxY-XEFlXFZoxY-right":{"uid":"edge-4IssDK2BPK-4IssDK2BPK-left-XEFlXFZoxY-XEFlXFZoxY-right","fromNodeId":"4IssDK2BPK","fromHandleId":"4IssDK2BPK-left","toNodeId":"XEFlXFZoxY","toHandleId":"XEFlXFZoxY-right","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-P-12zyk2RL-P-12zyk2RL-bottom-YRoSslJBvi-YRoSslJBvi-top":{"uid":"edge-P-12zyk2RL-P-12zyk2RL-bottom-YRoSslJBvi-YRoSslJBvi-top","fromNodeId":"P-12zyk2RL","fromHandleId":"P-12zyk2RL-bottom","toNodeId":"YRoSslJBvi","toHandleId":"YRoSslJBvi-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-YRoSslJBvi-YRoSslJBvi-bottom-tGVk7XiHH--tGVk7XiHH--top":{"uid":"edge-YRoSslJBvi-YRoSslJBvi-bottom-tGVk7XiHH--tGVk7XiHH--top","fromNodeId":"YRoSslJBvi","fromHandleId":"YRoSslJBvi-bottom","toNodeId":"tGVk7XiHH-","toHandleId":"tGVk7XiHH--top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-tGVk7XiHH--tGVk7XiHH--right-_kWmlsxdG--_kWmlsxdG--left":{"uid":"edge-tGVk7XiHH--tGVk7XiHH--right-_kWmlsxdG--_kWmlsxdG--left","fromNodeId":"tGVk7XiHH-","fromHandleId":"tGVk7XiHH--right","toNodeId":"_kWmlsxdG-","toHandleId":"_kWmlsxdG--left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-_kWmlsxdG--_kWmlsxdG--left-tGVk7XiHH--tGVk7XiHH--right":{"uid":"edge-_kWmlsxdG--_kWmlsxdG--left-tGVk7XiHH--tGVk7XiHH--right","fromNodeId":"_kWmlsxdG-","fromHandleId":"_kWmlsxdG--left","toNodeId":"tGVk7XiHH-","toHandleId":"tGVk7XiHH--right","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-tGVk7XiHH--tGVk7XiHH--bottom-mXVo4bxsBM-mXVo4bxsBM-top":{"uid":"edge-tGVk7XiHH--tGVk7XiHH--bottom-mXVo4bxsBM-mXVo4bxsBM-top","fromNodeId":"tGVk7XiHH-","fromHandleId":"tGVk7XiHH--bottom","toNodeId":"mXVo4bxsBM","toHandleId":"mXVo4bxsBM-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-mXVo4bxsBM-mXVo4bxsBM-bottom-rfmIhAcg2k-rfmIhAcg2k-top":{"uid":"edge-mXVo4bxsBM-mXVo4bxsBM-bottom-rfmIhAcg2k-rfmIhAcg2k-top","fromNodeId":"mXVo4bxsBM","fromHandleId":"mXVo4bxsBM-bottom","toNodeId":"rfmIhAcg2k","toHandleId":"rfmIhAcg2k-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ZWNbRJCMI7-ZWNbRJCMI7-right-vD3Irhm7HZ-vD3Irhm7HZ-left":{"uid":"edge-ZWNbRJCMI7-ZWNbRJCMI7-right-vD3Irhm7HZ-vD3Irhm7HZ-left","fromNodeId":"ZWNbRJCMI7","fromHandleId":"ZWNbRJCMI7-right","toNodeId":"vD3Irhm7HZ","toHandleId":"vD3Irhm7HZ-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-ZWNbRJCMI7-ZWNbRJCMI7-right-PKtOB6P7uG-PKtOB6P7uG-left":{"uid":"edge-ZWNbRJCMI7-ZWNbRJCMI7-right-PKtOB6P7uG-PKtOB6P7uG-left","fromNodeId":"ZWNbRJCMI7","fromHandleId":"ZWNbRJCMI7-right","toNodeId":"PKtOB6P7uG","toHandleId":"PKtOB6P7uG-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-vD3Irhm7HZ-vD3Irhm7HZ-right-e2B2PJell9-e2B2PJell9-left":{"uid":"edge-vD3Irhm7HZ-vD3Irhm7HZ-right-e2B2PJell9-e2B2PJell9-left","fromNodeId":"vD3Irhm7HZ","fromHandleId":"vD3Irhm7HZ-right","toNodeId":"e2B2PJell9","toHandleId":"e2B2PJell9-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-e2B2PJell9-e2B2PJell9-bottom-PKtOB6P7uG-PKtOB6P7uG-top":{"uid":"edge-e2B2PJell9-e2B2PJell9-bottom-PKtOB6P7uG-PKtOB6P7uG-top","fromNodeId":"e2B2PJell9","fromHandleId":"e2B2PJell9-bottom","toNodeId":"PKtOB6P7uG","toHandleId":"PKtOB6P7uG-top","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-PKtOB6P7uG-PKtOB6P7uG-right-_nQADnroEo-_nQADnroEo-left":{"uid":"edge-PKtOB6P7uG-PKtOB6P7uG-right-_nQADnroEo-_nQADnroEo-left","fromNodeId":"PKtOB6P7uG","fromHandleId":"PKtOB6P7uG-right","toNodeId":"_nQADnroEo","toHandleId":"_nQADnroEo-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}},"edge-FGDVapKhaf-FGDVapKhaf-right-ZWNbRJCMI7-ZWNbRJCMI7-left":{"uid":"edge-FGDVapKhaf-FGDVapKhaf-right-ZWNbRJCMI7-ZWNbRJCMI7-left","fromNodeId":"FGDVapKhaf","fromHandleId":"FGDVapKhaf-right","toNodeId":"ZWNbRJCMI7","toHandleId":"ZWNbRJCMI7-left","direction":"ft","selectable":true,"type":"solid","content":{"label":""}}}}}}